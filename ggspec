#!/usr/bin/guile \
-e main -s
ggspec - run a set of test suites in your project's 'spec' subdirectory.

Copyright (c) 2014 Yawar Amin
GitHub, Reddit, Twitter: yawaramin

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
!#
(use-modules
  (srfi srfi-1)
  (ggspec lib)
  (ice-9 ftw)
  (ice-9 getopt-long))

(define version-num "1.2")
(define release-name "Gemini")

(define (run-file fname opts)
  "Run all test suites found in the given file, passing in all given
  options, and aggregate and return the number of passed and failed
  tests.

  Arguments
    fname: string: the name of the file to look in for test suites.

    opts: (list opt ...)

      opt: '(option 'k v)

        'k: symbol: the name of the option to pass to all suites in the
        file.

        v: any: the value of the option.

  Returns
    (list num-passes num-fails): same as in the suite function."
  (call-with-input-file
    fname
    (lambda (f)
      (let loop
        ((form (read f))
        (num-passes 0)
        (num-fails 0)
        (num-skips 0))

        (cond
          ((eof-object? form)
            (list num-passes num-fails num-skips))
          ((equal? (car form) 'suite)
            ;; Add options to the current suite and run it.
            (let
              ((results
                (eval
                  (fold suite-add-option form opts)
                  (current-module))))

              (loop
                (read f)
                (+ num-passes (suite-passed results))
                (+ num-fails (suite-failed results))
                (+ num-skips (suite-skipped results)))))
          (#t
            ;; This is some form other than a suite definition.
            (begin
              (eval form (current-module))
              ;; Go on to the next form, with results unchanged.
              (loop (read f) num-passes num-fails num-skips))))))))

(define (run-tree dname opts)
  "Run all test suites found in files in the given directory and all its
  subdirectories, and aggregate and return the number of passed and
  failed tests.

  Arguments
    dname: string: the name of the directory to look in for test
    suites."
  (define (up-down-skip path stat result) result)
  (file-system-fold
    (stub #t)
    (lambda (path stat result)
      (define path-length (string-length path))

      (if (equal? (substring path (- path-length 4)) ".scm")
        (let ((file-result (run-file path opts)))
          (list
            (+ (suite-passed result) (suite-passed file-result))
            (+ (suite-failed result) (suite-failed file-result))
            (+ (suite-skipped result) (suite-skipped file-result))))))
    up-down-skip
    up-down-skip
    up-down-skip
    (lambda (path stat errno result) result)
    (list 0 0 0) ; Seed value of result: passes fails skips
    dname))

(define (show-help)
  (println
    (string-append
      "ggspec - a unit test framework and runner for GNU Guile.\n"
      "\n"
      "ggspec will look in the current directory's 'spec' subdirectory and run\n"
      "all tests it finds there.\n"
      "\n"
      "Usage: ggspec [-v|--version] [-h|--help] [-f|--format FMT] [-c|--colour]\n"
      "\n"
      "  -v\n"
      "  --version\n"
      "    Print version number of this command.\n"
      "\n"
      "  -h\n"
      "  --help\n"
      "    Print this help message.\n"
      "\n"
      "  -f FMT\n"
      "  --format FMT\n"
      "    Tell ggspec which output format to use. Formats are:\n"
      "      normal. (default) ggspec's output format.\n"
      "      tap. output for the TAP test protocol.\n"
      "\n"
      "  -c\n"
      "  --colour\n"
      "    Tell ggspec to colour assertion success or failure messages.\n"))
  (exit))

(define (show-version)
  (println
    (string-append
      "ggspec " version-num " " release-name "\n"
      "Copyright (c) 2014 Yawar Amin.\n"
      "License: MIT <http://opensource.org/licenses/MIT>\n"))
  (exit))

(define (main args)
  (define cmd-line-opts
    (getopt-long
      args
      '((version (single-char #\v) (value #f))
      (help (single-char #\h) (value #f))
      (colour (single-char #\c) (value #f))
      (format (single-char #\f) (value #t)))))
  (define output-cb-name (option-ref cmd-line-opts 'format "normal"))
  (define output-cb
    (cond
      ((equal? output-cb-name "normal") output-normal)
      ((equal? output-cb-name "tap") output-tap)
      (#t output-none)))
  (define colour? (option-ref cmd-line-opts 'colour #f))
  (define opts
    (list
      `(option 'output-cb ,output-cb)
      `(option 'colour ,colour?)))

  (if (option-ref cmd-line-opts 'help #f)
    (show-help))
  (if (option-ref cmd-line-opts 'version #f)
    (show-version))

  (let* ((result (run-tree "spec" opts)))
    (output-cb
      #:final-tally #t
      #:tally-passed (suite-passed result)
      #:tally-failed (suite-failed result)
      #:tally-skipped (suite-skipped result))
    (exit (suite-skipped result))))

;; vim:set ft=scheme:

