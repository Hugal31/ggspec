#!/usr/bin/guile \
-e main -s
ggspec - run a set of test suites in your project's 'spec' subdirectory.

Copyright (c) 2014 Yawar Amin
GitHub, Reddit, Twitter: yawaramin

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
!#
(use-modules
  (srfi srfi-1)
  (ggspec lib)
  (ice-9 ftw)
  (ice-9 getopt-long)
  (ice-9 rdelim))

(define version-num "1.3.1")
(define release-name "Gander")

(define (run-tree dname opts)
  "Run all test suites found in files in the given directory and all its
  subdirectories, and aggregate and return the number of passed and
  failed tests.

  Arguments
    dname: string: the name of the directory to look in for test suites.

    opts: same as for 'run-file', above.

  Returns
    (list num-passes num-fails): same as in the suite function."
  (define passed 0)
  (define failed 0)
  (define skipped 0)

  (nftw
    dname
    (lambda (filename statinfo flag base level)
      (define filename-length (string-length filename))

      (if (equal? (substring filename (- filename-length 4)) ".scm")
        (let ((file-results (run-file filename opts)))
          (set! passed (+ passed (suite-passed file-results)))
          (set! failed
            (+ failed (suite-failed file-results)))
          (set! skipped
            (+ skipped (suite-skipped file-results)))))

      #t))

  (list passed failed skipped))

(define (show-help)
  (println
    (string-append
      "ggspec - a unit test framework and runner for GNU Guile.\n"
      "\n"
      "ggspec will look in the current directory's 'spec' subdirectory and run\n"
      "all tests it finds there.\n"
      "\n"
      "Usage: ggspec [-v|--version] [-h|--help] [-f|--format FMT] [-c|--colour]\n"
      "\n"
      "  -v\n"
      "  --version\n"
      "    Print version number of this command.\n"
      "\n"
      "  -h\n"
      "  --help\n"
      "    Print this help message.\n"
      "\n"
      "  -f FMT\n"
      "  --format FMT\n"
      "    Tell ggspec which output format to use. Formats are:\n"
      "      normal. (default) ggspec's output format.\n"
      "      tap. output for the TAP test protocol.\n"
      "\n"
      "  -c\n"
      "  --colour\n"
      "    Tell ggspec to colour assertion success or failure messages.\n"))
  (exit))

(define (show-version)
  (println
    (string-append
      "ggspec " version-num " " release-name "\n"
      "Copyright (c) 2014 Yawar Amin.\n"
      "License: MIT <http://opensource.org/licenses/MIT>\n"))
  (exit))

(define (get-rc)
  "Returns the contents of the '~/.ggspecrc' file as a list of
  non-whitespace tokens. If the file does not exist, or is empty,
  returns an empty list."
  (define rc-fname
    (string-append
      (if-let v (getenv "HOME") v (getenv "USERPROFILE"))
      "/.ggspecrc"))

  (cons
    "ggspec"
    (if (access? rc-fname R_OK)
      (reverse
        (call-with-input-file
          rc-fname
          (lambda (f)
            (let loop
              ((token (read-delimited " \n" f))
              (cur-tokens end))

              (if (eof-object? token)
                cur-tokens
                (loop
                  (read-delimited " \n" f)
                  (cons token cur-tokens)))))))
      end)))

(define (main args)
  (define opts-spec
    '((version (single-char #\v) (value #f))
    (help (single-char #\h) (value #f))
    (colour (single-char #\c) (value #f))
    (format (single-char #\f) (value #t))))

  #!
  A two-tier option specification structure. First we get the
  command-line options, then we get the 'rc' file options.
  !#
  (define cmd-line-opts (getopt-long args opts-spec))
  (define rc-opts (getopt-long (get-rc) opts-spec))
  (define (get-option name default)
    "Gets an option from the command line, or the 'rc' file, or if
    neither exists, then from the given default"
    (option-ref cmd-line-opts name (option-ref rc-opts name default)))

  (define output-cb-name (get-option 'format "normal"))
  (define output-cb
    (cond
      ((equal? output-cb-name "normal") output-normal)
      ((equal? output-cb-name "tap") output-tap)
      (#t output-none)))
  (define colour? (get-option 'colour #f))

  (define opts
    (list
      `(option 'output-cb ,output-cb)
      `(option 'colour ,colour?)))

  #!
  Obviously, we don't support putting the 'help' and 'version'
  command-line options in the 'rc' file, because they would cause ggspec
  to immediately exit before running anything, which would be very
  annoying.
  !#
  (if (option-ref cmd-line-opts 'help #f)
    (show-help))
  (if (option-ref cmd-line-opts 'version #f)
    (show-version))

  (let ((result (run-tree "spec" opts)))
    (output-cb
      #:final-tally #t
      #:tally-passed (suite-passed result)
      #:tally-failed (suite-failed result)
      #:tally-skipped (suite-skipped result))
    (exit (suite-failed result))))

;; vim:set ft=scheme:

